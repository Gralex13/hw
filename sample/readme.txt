Задание
	Разработать сервер предоставляющий REST API сервисы, реализующее функционал для работы с данными моделей: Человек, Студент, Преподователь, Предмет обучения, Группа обучаемых, Занятие. Все сервисы покрыть тестами.

Описание:
	Для разработки рекомендую использовать Pycharm
Описать модели на фрейморке Django 2.2 на Python 3.5 со следующими полями.
«Человек» Абстрактная модель
- ФИО тип varchar длиной 255 символов
«Студент» (наследуется от класса «Человек»)
- Наследуемые поля
«Преподаватель» (наследуется от класса «Человек»)
- Наследуемые поля
- ученая степень тип varchar длиной 255 символов
«Предмет обучения»
- наименование тип varchar длиной 255 символов
«Группа обучаемых»
- наименование тип varchar длиной 255 символов
- перечень идентификаторов студентов(многие ко многим)
«Занятие»
- предмет обучения(внешний ключ)
- преподаватель(внешний ключ)
- группы обучаемых(внешний ключ)
- дата проведения – тип дата и время
- состояние занятия – тип логический. Отвечает за признак того что занятие завершено
- перечень идентификаторов отсутствующих студентов(многие ко многим)

Создать следующие REST Api в соответсвие с методами HTTP протокола(либо можно использовать разработку через тестирование TDD):
CRUD - это сокращенная аббревиатура означающая что сервис должен предоставлять операции Создания, Чтения данных, Изменение, Удаление. При создании сервисов рекомендую использовать класс ModelViewSet(из Django Rest Framework) а валидацию данных внутри Serializers(из Django Rest Framework)
Для работы с моделью «Студент»
1.	Операции CRUD
Для работы с моделью «Преподаватель»
1.	Операции CRUD
Для работы с моделью «Предмет обучения»
1.	Операции CRUD
2.	Получение списка занятий по одному предмету обучения
Для работы с моделью «Группа обучаемых»
1.	Операции CRUD
2.	Получения списка студентов в одной группе
Предусмотреть валидацию того что бы нельзя было добавить студента в группу если он уже назначен в какую либо из групп!
	Проверка того что группа с таким названием уже существует.
Для работы с моделью «Занятие»
1.	Создание
2.	Получение списка
3.	Получение одной записи
4.	Изменение
5.	Фильтрация по группе обучаемых, предмету, преподавателю
6.	Получения списка актуальных занятий
Предусмотреть валидацию того что если занятие завершено то его нельзя редактировать. 
Занятие нельзя назначить на прошедшее время(только настоящее или будущее)
